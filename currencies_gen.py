import os
import copy

header = """//
//  Currencies.swift
//  MoneyTracker
//
//  Created by Victor Varenik on 13.07.2022.
//  Generated by currencies_gen.py
//

import Foundation

/// Static currencies data class
final class Currencies {
"""

file_url = "https://raw.githubusercontent.com/datasets/currency-codes/master/data/codes-all.csv"
file_name = "codes-all.csv"
out_path = "./MoneyTracker/currencies.swift"
black_list = ["Codes specifically reserved for testing purposes", "The codes assigned for transactions where no currency is involved"]
popular_names = ["USD", "EUR", "RUB", "UAH"]

currencies = []
writed_currencies = []
writed_currencies_popular = []

def is_exist(arr, name, by_fullname=True):
    for currency in arr:
        if by_fullname and currency["full_name"] == name:
            return True
        if not by_fullname and currency["little_name"] == name:
            return True

    return False

# remove old outfile
os.system("rm {}".format(out_path))

# output file
outfile = open(out_path, 'a')

# download file
os.system("wget {}".format(file_url))

# read file
file = open(file_name, 'r')
content = file.read()
file.close()

# write header
outfile.write(header)

# parsing
lines = content.split("\n")
is_first = True
for line in lines:
    if is_first: # skip first line
        is_first = False
        continue
    print(line)
    spl = line.split(",")
    try:
        full_name = spl[1]
        little_name = spl[2]
        currency = {"full_name":full_name, "little_name":little_name}
        currencies.append(currency)
    except:
        print("Error parsing {}, skipped".format(line))
# sort()
currencies = sorted(currencies, key=lambda x: x['full_name'], reverse=False)

# generating all
outfile.write("\tstatic let currenciesAll = [\n")
for currency in currencies:
    if not is_exist(writed_currencies, currency["full_name"]):
        if len(currency["little_name"]) > 0:
            if currency["full_name"][0] != ' ' and currency["full_name"][0] != '"' and not currency["full_name"] in black_list:
                writed_currencies.append(currency)
                outfile.write("\t\tCurrency(fullName: \"{}\", littleName: \"{}\"),\n".format(currency["full_name"], currency["little_name"]))
            else:
                print("Bad currency skiped: {}".format(currency["full_name"]))
        else:
            print("Empty currency skiped: {}".format(currency["full_name"]))
    else:
        print("Dublicate skiped: {}".format(currency))

outfile.write("\t]\n\n")

# generating popular
outfile.write("\tstatic let currenciesPopular = [\n")
index = 0
for currency in writed_currencies:
    if currency["little_name"] in popular_names and not is_exist(writed_currencies_popular, currency['little_name'], False):
        writed_currencies_popular.append(currency)
        outfile.write("\t\tcurrenciesAll[{}],\n".format(index))
    index += 1
outfile.write("\t]\n\n}\n")

# end
outfile.close()
print("Total currencies writed: {}/{}".format(len(writed_currencies), len(currencies)))

# clean
os.system("rm {}".format(file_name))
